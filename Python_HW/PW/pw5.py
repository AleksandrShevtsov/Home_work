# Есть два вида растений (Plant): цветы (Flower) и деревья (Tree).
# В течение года растения разных видов растут и увядают по-разному, в зависимости
# от времени года:
# ● Весной деревья и цветы растут.
# ● Летом деревья растут, а цветы - цветут (не растут).
# ● Осенью деревья не растут, а высота цветов обнуляется, так как их срезают на
# зимовку.
# ● Зимой ни деревья ни цветы не растут.
# Задача: смоделировать рост дерева и цветка на протяжении заданного количества
# лет, печатая статус роста каждого растения в зависимости от времени года.
# Рекомендации:
# 1. Создайте абстрактный класс Plant, которого есть 3 свойства: display_name
# (читаемое название), текущая высота (height), текущий возраст (age).

# 2. У классов Flower и Tree есть приватные статические атрибуты
# flower_grow_per_season и tree_grow_per_season соответственно. У класса Plant
# есть абстрактный метод grow_per_season(), который переопределен в
# подклассах и возвращает соответствующее статическое значение.
# Подумайте, почему статические атрибуты приватны и зачем нам нужен
# абстрактный метод grow_per_season()? Почему создание обычного метода тут
# не очень подходит?

# 3. Подумайте, какие из полей классов цветок и дерево публичные, какие
# приватные, а какие - защищенные. Информация для размышления: стартовый
# возраст можно установить при создании объекта класса растения, его можно
# посмотреть\напечатать, но изменить его можно только на единичку по
# истечению года.
# 4. У класса Plant есть несколько методов: do_spring(), do_summer(), do_autumn(),
# do_winter(), которые меняют свойства age и height в зависимости от типа
# растения и правил роста (см условие) в определенный сезон. Эти методы
# также печатают, что происходит с растением в соответствующий сезон,
# например, если вызвать метод do_spring() для цветка, то печатается “Цветок
# вырос весной, высота 10 см”. Метод do_autumn() для дерева печатает что-то
# вроде “Дерево не растет осенью, текущая высота 100 см”.
# 5. Наследуйте два класса Plant и Flower от класса Plant.
# 6. Подумайте, какие методы из do_spring(), do_summer(), do_autumn(), do_winter()
# можно реализовать в классе Plant (подсказка: те, в которые растения растут
# одинаково).
# 7. Для проверки работы программы создайте два объекта: один цветок и одно
# дерево. Положите их список plants.
# 8. Задайте количество лет, в течение которых вы будете наблюдать рост
# растений, например, 2. В цикле до количества лет роста вызывайте
# соответствующие методы do_spring() и так далее по временам года для
# каждого растения из списка plants (цикл по растения в цикле по годам).
# 9. Убедитесь, что растения выросли по определенным в условии правилам:
# дерево вытянулось, а высота цветка зависит от последнего времени года и
# может быть либо 0 (его срезали) либо имеет высоту flower_grow_per_season
# (вырос весной, не рос, а цвел летом, зимой не рос).

from abc import ABC, abstractmethod


class Plant(ABC):
    def __init__(self, display_name, age, height):
        self.name = display_name
        self.age = age
        self.height = height
    
    @abstractmethod
    def grow_per_season(self):
    
    def do_spring(self):
        self.height += self.grow_per_season
        
    
    @abstractmethod
    def do_summer(self):
        pass
    
    @abstractmethod
    def do_autumn(self):
        pass
    
    
    def do_winter(self):
